# -*- coding: utf-8 -*-
"""Assignment12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLx_MMLhI8sKpelyQPgXeX8fWZLI4smc

# Importing Packages
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
import matplotlib.pyplot as plt
import seaborn as sns

"""# Load The Dataset"""

url = "http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
columns = ["sepal_length", "sepal_width", "petal_length", "petal_width", "species"]
iris_data= pd.read_csv(url, names=columns)
iris_data.head()

"""# Data preprocessing"""

iris_data.info()

df_summary=iris_data.describe()
df_summary

iris_data['species'].value_counts()

rows, col = iris_data.shape
print("Rows : %s, column : %s" % (rows, col))

y= iris_data['species']
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
print(y_encoded)

iris_data['output']=y_encoded
iris_data.head()

boxplot=iris_data.plot(kind='box', subplots=True, layout=(2,3), sharex=False, sharey=False, colormap='bwr', figsize=(15,10))

print('From the boxplot, it is visible that only sepal width is having the outlier, whereas sepallength, petallength, petalwidth having datapoints within min and maxrange.')
print('It is visible that values in sepallength and sepalwidth are tightly distributed and IQ range is small, whereas in petallength and petalwidth the values are distibuted widely,so IQ range are high.')

iris_data.corr()

sns.heatmap(iris_data.corr(), annot=True, cmap="coolwarm")  # You can choose different color maps

sns.violinplot(x='sepal_length', y='species', data=iris_data, inner='stick', palette='autumn')
plt.show()
sns.violinplot(x='sepal_width', y='species', data=iris_data, inner='stick', palette='autumn')
plt.show()
sns.violinplot(x='petal_length', y='species', data=iris_data, inner='stick', palette='autumn')
plt.show()
sns.violinplot(x='petal_width', y='species', data= iris_data, inner='stick', palette='autumn')
plt.show()

# Scatterplot with best fit line to explore relation b/w sepallength(dependent)& sepalwidth,petalwidth,petallengh(Independent)

a=sns.lmplot(x='sepal_width', y='output', data=iris_data, aspect=1.5, scatter_kws={'alpha':0.2})
b=sns.lmplot(x='sepal_length', y='output', data=iris_data, aspect=1.5, scatter_kws={'alpha':0.2})
c=sns.lmplot(x='petal_width', y='output', data=iris_data, aspect=1.5, scatter_kws={'alpha':0.2})
d=sns.lmplot(x='petal_length', y='output', data=iris_data, aspect=1.5, scatter_kws={'alpha':0.2})

#Combine scatterplot to explore relation b/w sepallength, sepalwidth, petalwidth, petallength

scatter=pd.plotting.scatter_matrix(iris_data,figsize=(15,10))

#Scatterplot EDA b/w sepallength, sepalwidth, petalwidth, petallength and how species are reacting to it.

scatterplot=sns.pairplot(iris_data,hue="species")

"""# Linear regression"""

iris_data

iris_data.drop('output',axis=1,inplace=True)

encode = LabelEncoder()
iris_data.species = encode.fit_transform(iris.species)

print(iris.head())

# train-test-split
train , test = train_test_split(iris_data,test_size=0.2,random_state=0)

print('shape of training data : ',train.shape)
print('shape of testing data',test.shape)

# seperate the target and independent variable
train_x = train.drop(columns=['species'],axis=1)
train_y = train['species']

test_x = test.drop(columns=['species'],axis=1)
test_y = test['species']

#Model Training using least square estimator
model = LinearRegression(fit_intercept=True)
model.fit(train_x,train_y)

predict = model.predict(test_x)
rounded_predict = np.round(predict).astype(int)
print('Predicted Values on Test Data', rounded_predict)
predicted_labels = label_encoder.classes_[rounded_predict]

# Print the predicted labels
print('Species related to predicted values on Test Data:', predicted_labels)

# Model evaluation using cross-validation

scores = cross_val_score(model, train_x, train_y, cv=5)
print("Cross-validation scores:", scores)
print("Mean accuracy:", scores.mean())
